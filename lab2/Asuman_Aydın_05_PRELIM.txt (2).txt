.data
    array: .word 3,2,1,4
    str_array: .ascii "ccc\0bbb\0aaa\0ddd\0"
    n: .word 4
.text

j main

str_swap:
    # swap two strings
    # $a0 - beginning of the first str
    # $a1 - beginning of the second str
    # Assume that str length is 3
    li $t6, 0 # loop counter
    li $t7, 3 # str length
str_loop:
    bgt $t6, $t7, str_loop_end
    lb $t8, 0($a0)  
    lb $t9, 0($a1)
    sb $t8, 0($a1)
    sb $t9, 0($a0)
    addi $a0, $a0, 1
    addi $a1, $a1, 1
    addi $t6, $t6, 1
    b str_loop
str_loop_end:
    jr $ra

swap:
    # $a0 - address of the first num
    # $a1 - address of the second num
    # $a2 - index of the first number in the array
    addi $sp, $sp, -4
    sw $ra, 0($sp)
    lw $s0, 0($a0)
    lw $s1, 0($a1)
    sw $s0, 0($a1)
    sw $s1, 0($a0)

    la $a0, str_array
    sll $a2, $a2, 2   # $a2 = $a2 * 4
    add $a0, $a0, $a2 # address of the first str
    addi $a1, $a0, 4  # address of the next string
    jal str_swap

    lw $ra, 0($sp)
    addi $sp, $sp, 4
    jr $ra

sort:
    # sort in non-decreasing order
    # $a0 - address of the array
    # $a1 - length of the array
    addi $sp, $sp, -12
    sw $ra, 0($sp)
    sw $a0, 4($sp)
    sw $a1, 8($sp)
    li $t0, 0 # outer index 
    move $t2, $a1
    subi $t2, $t2, 1 # upper bound = length - 1
outer:
    bgt $t0, $t2, outer_end
    li $t1, 0 # inner index
    lw $a0, 4($sp)
    inner:
        bge $t1, $t2, inner_end
        lw $t3, 0($a0) # $t3 = a[i]
        lw $t4, 4($a0) # $t4 = a[i+1]
        move $t5, $a0       # save $a0 in $t5
        bgt $t3, $t4, swap_elements # if a[i] > a[i+1]
        b inner_continue
    swap_elements:
        addi $a1, $a0, 4
        move $a2, $t1
        jal swap
    inner_continue:
        addi $t1, $t1, 1    # increment inner counter
        move $a0, $t5
        addi $a0, $a0, 4    # move to the next position in the array
        b inner

    inner_end:
        addi $t0, $t0, 1    # increment outer loop
        b outer
outer_end:
    lw $ra, 0($sp)  # restore $ra
    addi $sp, $sp, 12
    jr $ra


main:
    la $a0, array
    lw $a1, n
    jal sort # bubble sort the array

    addi    $t0, $zero, 0       #t0=0 counter    
    la $s0, array # address of num_array
    la $s1, str_array # address of str_array
    lw $s2, n
res:
    # get number from num_array and print it
    lw $a0, 0($s0)
    li $v0, 1
    syscall

    # move to the next element, increment by 4 because numbers take 1 word = 4 bytes
    addi $s0, $s0, 4 

    # print space
    la $a0, 32
    li $v0, 11
    syscall

    # get string from str_array and print it
    la $a0, 0($s1)
    li $v0, 4
    syscall

    # print space
    la $a0, 32
    li $v0, 11
    syscall

    # move to the next element, increment by 4 because strs have 4 bytes length (in your case)
    addi $s1, $s1, 4

    # increment loop counter
    addi $t0, $t0, 1
    blt $t0, $s2, res # $s2 is size of the array
end:
    li  $v0, 10         
    syscall             #the end